import{_ as r,V as l,W as t,X as e,Y as s,$ as n,a0 as i,C as o}from"./framework-a71e09ed.js";const d="/assets/img/基于Docker配置mysql主从复制/查看docker已安装镜像.png",c="/assets/img/基于Docker配置mysql主从复制/查看正在运行的容器列表.png",p="/assets/img/基于Docker配置mysql主从复制/进入容器.png",m="/assets/img/基于Docker配置mysql主从复制/my.cnf路径.png",u="/assets/img/基于Docker配置mysql主从复制/vim进入my.conf.png",h="/assets/img/基于Docker配置mysql主从复制/进入master-mysql.png",g="/assets/img/基于Docker配置mysql主从复制/master服务的binlog文件名和位置.png",v="/assets/img/基于Docker配置mysql主从复制/进入slave1-mysql.png",b="/assets/img/基于Docker配置mysql主从复制/查询从节状态.png",_="/assets/img/基于Docker配置mysql主从复制/查看权限.png",y="/assets/img/基于Docker配置mysql主从复制/查看用户表信息.png",k="/assets/img/基于Docker配置mysql主从复制/无权限提示.png",f={},q=i(`<h1 id="基于docker实现mysql主从配置" tabindex="-1"><a class="header-anchor" href="#基于docker实现mysql主从配置" aria-hidden="true">#</a> 基于Docker实现mysql主从配置</h1><h2 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h2><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>mysql - latest(8.0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="感谢" tabindex="-1"><a class="header-anchor" href="#感谢" aria-hidden="true">#</a> 感谢</h2>`,4),x=e("strong",null,"狂神说java",-1),w={href:"https://www.bilibili.com/video/BV1ei4y1K7dn?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.modb.pro/db/29919",target:"_blank",rel:"noopener noreferrer"},D={href:"https://blog.csdn.net/qq_40942490/article/details/109158285",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.kuangstudy.com/zl/sharding#1369645557613608962",target:"_blank",rel:"noopener noreferrer"},E={href:"https://blog.csdn.net/zhengwei125/article/details/79412857",target:"_blank",rel:"noopener noreferrer"},L={href:"https://blog.csdn.net/wangxuelei036/article/details/105848909",target:"_blank",rel:"noopener noreferrer"},z=i(`<hr><h2 id="docker安装配置mysql" tabindex="-1"><a class="header-anchor" href="#docker安装配置mysql" aria-hidden="true">#</a> docker安装配置mysql</h2><h3 id="安装mysql" tabindex="-1"><a class="header-anchor" href="#安装mysql" aria-hidden="true">#</a> 安装mysql</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  选择你自己需要安装的mysql版本,这这里选择的是最新的(latest),对应 <strong>8.0</strong>,版本这里包含了一个连接的坑,我下文会讲!</p>`,5),A=e("strong",null,"Docker",-1),R={href:"https://www.kuangstudy.com/zl/sharding#1369621064673521666",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.kuangstudy.com/zl/sharding#1369621064673521666",target:"_blank",rel:"noopener noreferrer"},M=i(`<p>  该博客是<strong>KaungStudy</strong>飞哥提供的文档。</p><hr><h3 id="mysql-是否安装成功" tabindex="-1"><a class="header-anchor" href="#mysql-是否安装成功" aria-hidden="true">#</a> mysql 是否安装成功?</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看安装成功的镜像</span>
<span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="查看docker已安装镜像" tabindex="0" loading="lazy"><figcaption>查看docker已安装镜像</figcaption></figure><p>  存在<strong>mysql</strong>红框内容就表示安装成功!</p><hr><h3 id="mysql-启动" tabindex="-1"><a class="header-anchor" href="#mysql-启动" aria-hidden="true">#</a> mysql 启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql-master <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">12345678</span> <span class="token parameter variable">-d</span> mysql:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>run : 启动</p><p>-p 3306:3306 : 指定映射端口, -p 外部端口:内部端口(容器内部)</p><p>--name mysql-master ：给容器起别名,起个名称方便以后称呼(我用的主-mysql是mymysql)</p><p>-e MYSQL_ROOT_PASSWORD=12345678 : 设置root用户的密码</p><p>-d : 后台运行</p><p>mysql:latest ： mysql:tag,tag就是你选择的msyql版本号</p></blockquote><hr><h3 id="查看mysql容器是否启动成功" tabindex="-1"><a class="header-anchor" href="#查看mysql容器是否启动成功" aria-hidden="true">#</a> 查看mysql容器是否启动成功?</h3><p>  mysql启动成功后,会打印出当前运行容器的id或者你自己查看容器状态!</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="查看正在运行的容器列表" tabindex="0" loading="lazy"><figcaption>查看正在运行的容器列表</figcaption></figure><p>  这样的就表示启动成功了。</p><h2 id="msyql配置主从数据库" tabindex="-1"><a class="header-anchor" href="#msyql配置主从数据库" aria-hidden="true">#</a> msyql配置主从数据库</h2><h3 id="mysql共同配置" tabindex="-1"><a class="header-anchor" href="#mysql共同配置" aria-hidden="true">#</a> mysql共同配置</h3><p>  先进入 mysql容器内部,这里我的主mysql叫<strong>mymysql</strong>,命令如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mymysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="进入容器" tabindex="0" loading="lazy"><figcaption>进入容器</figcaption></figure><p>  可以看到下一行的**root@**已经不一样了,并且该id就是你当前进入的容器的容器id,</p><p>  查看容器内部配置文件所在,我已经把my.cnf所在截图了,如下图:</p><figure><img src="'+m+'" alt="my.cnf路径" tabindex="0" loading="lazy"><figcaption>my.cnf路径</figcaption></figure><p>  <code>/etc/mysql/my.cnf</code> (这个有用!)</p><p>  OK，我感觉我是不是废话太多了,那我们下面就加快进度吧!</p><p>  拿到路径之后,我们先进入<strong>my.cnf</strong>。</p><figure><img src="'+u+`" alt="vim进入my.conf" tabindex="0" loading="lazy"><figcaption>vim进入my.conf</figcaption></figure><p>  好吧,容器内部没装vim,你可以自己去安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> update

<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  我就没有这么去安装了我直接用了<strong>docker cp</strong></p><hr><h3 id="使用-docker-cp-配置-my-cnf" tabindex="-1"><a class="header-anchor" href="#使用-docker-cp-配置-my-cnf" aria-hidden="true">#</a> 使用 docker cp 配置 my.cnf</h3><ol><li><p>将my.cnf 从容器复制到主机上。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 容器id<span class="token punctuation">(</span>或容器名称<span class="token punctuation">)</span>:/etc/mysql/my.cnf /docker/mysql/master<span class="token punctuation">(</span>或slavel1<span class="token punctuation">)</span>/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将容器id或名称为XXX的容器在 /etc/mysql/my.cnf 复制给主机路径下的/docker/mysql/master/my.cnf文件。</p></li><li><p>修改my.cnf(添加对应的主从配置)。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 主节点如下:</span>
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment">## 同一局域网内注意要唯一</span>
server-id<span class="token operator">=</span><span class="token number">100</span>  
<span class="token comment">## 开启二进制日志功能，可以随便取（关键）</span>
log-bin<span class="token operator">=</span>master-bin
binlog-format<span class="token operator">=</span>ROW     // 二级制日志格式，有三种 row，statement，mixed
binlog-do-db<span class="token operator">=</span>数据库名  //同步的数据库名称,如果不配置，表示同步所有的库
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从节点如下:</span>
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment"># 设置server_id,注意要唯一</span>
server-id<span class="token operator">=</span><span class="token number">201</span>  
<span class="token comment"># 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span>
log-bin<span class="token operator">=</span>mysql-slave-bin   
<span class="token comment"># relay_log配置中继日志</span>
<span class="token assign-left variable">relay_log</span><span class="token operator">=</span>mysql-relay-bin  
<span class="token comment"># 设置为只读,该项如果不设置，表示slave可读可写</span>
<span class="token assign-left variable">read_only</span><span class="token operator">=</span><span class="token number">1</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意每个主从节点的server-id都要唯一!!!</p></li><li><p>将修改后的my.cnf复制回容器中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> /docker/mysql/master<span class="token punctuation">(</span>或slavel1<span class="token punctuation">)</span>/my.cnf 容器id<span class="token punctuation">(</span>或容器名称<span class="token punctuation">)</span>:/etc/mysql/my.cnf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就是和步骤1的指令路径反一下。</p></li><li><p>重启服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart 容器名称/容器id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><hr><h3 id="master-主-配置" tabindex="-1"><a class="header-anchor" href="#master-主-配置" aria-hidden="true">#</a> master(主)配置</h3><p>  经过共同配置之后呢,我们先进入主-mysql中,查看对应配置从节点需要的信息。</p><h4 id="进入mysql内部" tabindex="-1"><a class="header-anchor" href="#进入mysql内部" aria-hidden="true">#</a> 进入mysql内部</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器内部</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器id/容器名称 /bin/bash
<span class="token comment"># 进入mysql</span>
mysql <span class="token parameter variable">-uroot</span> -p密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="进入master-mysql" tabindex="0" loading="lazy"><figcaption>进入master-mysql</figcaption></figure><p>  登录成功</p><hr><h4 id="查看master服务的binlog文件名和位置-master节点执行" tabindex="-1"><a class="header-anchor" href="#查看master服务的binlog文件名和位置-master节点执行" aria-hidden="true">#</a> 查看master服务的binlog文件名和位置(master节点执行)</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show master status;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="master服务的binlog文件名和位置" tabindex="0" loading="lazy"><figcaption>master服务的binlog文件名和位置</figcaption></figure><p>  OK，接下来配置从节点。</p><hr><h3 id="slave-从-配置" tabindex="-1"><a class="header-anchor" href="#slave-从-配置" aria-hidden="true">#</a> slave(从)配置</h3><p>  它一开始的步骤和主的一样,都是共同配置,唯一不一样的是修改 <strong>my.cnf</strong>不一样,请注意!</p><p>  这里的内容已经在<a href="#mysql%E5%85%B1%E5%90%8C%E9%85%8D%E7%BD%AE">共同配置</a>里面写了。</p><h4 id="进入mysql内部-1" tabindex="-1"><a class="header-anchor" href="#进入mysql内部-1" aria-hidden="true">#</a> 进入mysql内部</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器内部</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器id/容器名称 /bin/bash
<span class="token comment"># 进入mysql</span>
mysql <span class="token parameter variable">-uroot</span> -p密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="进入slave1-mysql" tabindex="0" loading="lazy"><figcaption>进入slave1-mysql</figcaption></figure><p>  登录成功。</p><hr><h4 id="执行-change-master-to" tabindex="-1"><a class="header-anchor" href="#执行-change-master-to" aria-hidden="true">#</a> 执行 change master to</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>change master to master_user=&#39;root&#39;,master_password=&#39;mysql8.0&#39;,master_host=&#39;192.168.168.101&#39;,master_port=3306,get_master_public_key=1, master_log_file=&#39;master-bin.000004&#39;, master_log_pos=1097, master_connect_retry=30;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>master_host ：Master库的地址。</p></blockquote><blockquote><p>master_port：Master的端口号，指的是容器的端口号。</p></blockquote><blockquote><p>master_user：用于数据同步的用户。</p></blockquote><blockquote><p>master_password：用于同步的用户的密码。</p></blockquote><blockquote><p>master_log_file：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值。</p></blockquote><blockquote><p>master_log_pos：从哪个 Position 开始读，即上文中提到的 Position 字段的值。</p></blockquote><blockquote><p>master_connect_retry：如果连接失败，重试的时间间隔，单位是秒，默认是60秒。</p></blockquote><blockquote><p>get_master_public_key=1: 解决 <strong>Authentication plugin &#39;caching_sha2_password&#39; reported error:Authentication require secure connection</strong> 问题导致的密码插件问题 - msyql8.0才出现的问题。</p></blockquote><blockquote><p>注意: 当前字段中说的文中指的是 在锚点 - **查看master服务的binlog文件名和位置(master节点执行)**那里查询出来的主节点信息。</p></blockquote><hr><h3 id="启动slave" tabindex="-1"><a class="header-anchor" href="#启动slave" aria-hidden="true">#</a> 启动slave</h3><div class="language-msyql line-numbers-mode" data-ext="msyql"><pre class="language-msyql"><code>start slave;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="查看是否配置成功" tabindex="-1"><a class="header-anchor" href="#查看是否配置成功" aria-hidden="true">#</a> 查看是否配置成功?</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show slave status \\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  \\G : 表示换行。</p><figure><img src="`+b+'" alt="查询从节状态" tabindex="0" loading="lazy"><figcaption>查询从节状态</figcaption></figure><p>  两个 YES 就成功了!</p><hr><h3 id="配置从节点时-出现的各种问题" tabindex="-1"><a class="header-anchor" href="#配置从节点时-出现的各种问题" aria-hidden="true">#</a> 配置从节点时,出现的各种问题?</h3>',77),P=e("strong",null,"飞哥",-1),N={href:"https://www.kuangstudy.com/zl/sharding#1369645557613608962",target:"_blank",rel:"noopener noreferrer"},T=e("hr",null,null,-1),I=e("h4",{id:"我讲一下我的主机配置时出现的问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#我讲一下我的主机配置时出现的问题","aria-hidden":"true"},"#"),s(" 我讲一下我的主机配置时出现的问题?")],-1),Y=e("p",null,[s("  1. "),e("strong",null,"Authentication plugin 'caching_sha2_password' reported error:Authentication require secure connection"),s(" 问题导致的密码插件问题 - msyql8.0才出现的问题。")],-1),B=e("strong",null,"执行 change master to",-1),C={href:"https://www.modb.pro/db/29919",target:"_blank",rel:"noopener noreferrer"},F=i(`<hr><p>  2. No query specified</p><p>  show slave status\\G;</p><p>  多了个分号(<code>;</code>)。</p><hr><p>  3. The slave I/O thread stops because master and slave have equal MySQL server ids; these ids must be different for replication to work (or the --replicate-same-server-id option must be used on slave but this does not always make sense; please check the manual before using it).</p><p>  因为我的从节点连接主节点配置那里的ip地址配置错了。</p><p>  4. Parameters MASTER_LOG_FILE, MASTER_LOG_POS, RELAY_LOG_FILE and RELAY_LOG_POS can</p><p>  由于之前用的master_auto_position=1，现在改回0，重新用pos方法change就可以了。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 停止slave
stop slave;
# 清楚配置
reset slave;
change master to master_auto_position=0;
change master to master_user=&#39;root&#39;,master_password=&#39;mysql8.0&#39;,master_host=&#39;192.168.168.101&#39;,master_port=3306,get_master_public_key=1, master_log_file=&#39;master-bin.000004&#39;, master_log_pos=1097, master_connect_retry=30;
# 启动slave
start slave;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="使用-root用户-造成从-slavel-mysql-服务器可以操作数据-crud" tabindex="-1"><a class="header-anchor" href="#使用-root用户-造成从-slavel-mysql-服务器可以操作数据-crud" aria-hidden="true">#</a> 使用 root用户 造成从(slavel-mysql)服务器可以操作数据（crud）?</h3><p>影响: 一不小心就可能造成主从数据不一致!</p>`,13),V={href:"https://blog.csdn.net/weixin_36434967/article/details/113311189",target:"_blank",rel:"noopener noreferrer"},K=i(`<p>  我建议给从库分配一个普通用户账号并仅分配对应权限!</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 例如以下,创建一个名称为 &#39;username&#39; 密码为 &#39;password&#39; 且任何ip都可以连接的账号 
create user &#39;username&#39;@&#39;%&#39; identified by &#39;password&#39;;
# 分配权限,例如我只给他 SELECT 权限
grant select on *.* to &#39;username&#39;@&#39;%&#39;;
# 需要刷新
flush privileges;
# 查看效果
show grants for &#39;username&#39;@&#39;%&#39;;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+`" alt="查看权限" tabindex="0" loading="lazy"><figcaption>查看权限</figcaption></figure><p>  然后你就可以自己去测试了，如果先看账号创建成功了吗?</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 查询 mysql 库下的用户表信息
select host,user from mysql.user;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="查看用户表信息" tabindex="0" loading="lazy"><figcaption>查看用户表信息</figcaption></figure><p>  权限分配成功后,我这边使用<strong>navicat</strong>对&#39;username&#39;账号进行登录,并(修改、新增、删除)数据,出现下图错误信息!</p><figure><img src="'+k+'" alt="无权限提示" tabindex="0" loading="lazy"><figcaption>无权限提示</figcaption></figure>',8);function Q(W,X){const a=o("ExternalLinkIcon");return l(),t("div",null,[q,e("p",null,[s("  感谢B站"),x,s("这个IP上上传的"),e("a",w,[s("视频资源"),n(a)])]),e("p",null,[s("  "),e("a",S,[s("主从复制报错2061：Authentication plugin 'caching_sha2_password' reported error:Authentication require secure connection - 墨天轮"),n(a)])]),e("p",null,[s("  "),e("a",D,[s("Docker搭建MySQL8主从复制 （全网最详细版）_bright的博客-CSDN博客"),n(a)])]),e("p",null,[s("  "),e("a",O,[s("ShardingShpere数据库中间件- 专栏 -KuangStudy"),n(a)])]),e("p",null,[s("  "),e("a",E,[s("ERROR1776(HY000):ParametersMASTER_LOG_FILE, MASTER_LOG_POS, RELAY_LOG_FILE and RELAY_LOG_POS can_小伟的博客-CSDN博客"),n(a)])]),e("p",null,[s("  "),e("a",L,[s("@@GLOBAL.GTID_MODE = OFF 问题_wangxuelei036的博客-CSDN博客"),n(a)])]),z,e("p",null,[s("  如果你不是使用"),A,s("进行安装,而是直接在linux下安装mysql,我"),e("a",R,[s("推荐教程"),n(a)]),s(" - "),e("a",G,[s("（02~03）"),n(a)])]),M,e("p",null,[s("  "),P,s("这里已经例举了一大部分,我就不一一讲了,放置传送门: "),e("a",N,[s("https://www.kuangstudy.com/zl/sharding#1369645557613608962"),n(a)])]),T,I,Y,e("p",null,[s("  从配置锚点 - "),B,s("里已经加上了该解决的配置了,看 get_master_public_key=1，从"),e("a",C,[s("博客"),n(a)]),s("中得到的解决方法(在评论那块)。")]),F,e("p",null,[e("a",V,[s("mysql从库不能写吗_mysql的主从复制，从库设为只读不能写_L NEO的博客-CSDN博客"),n(a)])]),K])}const H=r(f,[["render",Q],["__file","基于Docker实现mysql主从配置.html.vue"]]);export{H as default};
