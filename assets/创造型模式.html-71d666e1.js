const t=JSON.parse('{"key":"v-1604c700","path":"/backEnd/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E9%80%A0%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","title":"创造型模式","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-03-23T00:00:00.000Z","category":["设计模式"],"tag":["开发","java","springboot","设计模式"],"order":2,"description":"创造型模式   创造型模式是设计模式中的一类，它主要用于处理对象的创建，隐藏对象的创建细节，提供更加灵活的对象创建方式，降低系统的耦合度。 &nbsp;  常见的创造型模式包括： 简单工厂模式（Simple Factory Pattern） 工厂方法模式（Factory Method Pattern） 抽象工厂模式（Abstract Factory Pattern） 单例模式（Singleton Pattern） 原型模式（Prototype Pattern） 建造者模式（Builder Pattern）","head":[["meta",{"property":"og:url","content":"https://blakteayes.github.io/backEnd/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E9%80%A0%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"红茶的博客"}],["meta",{"property":"og:title","content":"创造型模式"}],["meta",{"property":"og:description","content":"创造型模式   创造型模式是设计模式中的一类，它主要用于处理对象的创建，隐藏对象的创建细节，提供更加灵活的对象创建方式，降低系统的耦合度。 &nbsp;  常见的创造型模式包括： 简单工厂模式（Simple Factory Pattern） 工厂方法模式（Factory Method Pattern） 抽象工厂模式（Abstract Factory Pattern） 单例模式（Singleton Pattern） 原型模式（Prototype Pattern） 建造者模式（Builder Pattern）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"开发"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-03-23T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创造型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简单工厂模式（Simple Factory Pattern）","slug":"简单工厂模式-simple-factory-pattern","link":"#简单工厂模式-simple-factory-pattern","children":[{"level":3,"title":"如何使用","slug":"如何使用","link":"#如何使用","children":[]}]},{"level":2,"title":"工厂方法模式（Factory Method Pattern）","slug":"工厂方法模式-factory-method-pattern","link":"#工厂方法模式-factory-method-pattern","children":[{"level":3,"title":"如何使用","slug":"如何使用-1","link":"#如何使用-1","children":[]}]},{"level":2,"title":"抽象工厂模式（Abstract Factory Pattern）","slug":"抽象工厂模式-abstract-factory-pattern","link":"#抽象工厂模式-abstract-factory-pattern","children":[{"level":3,"title":"如何使用","slug":"如何使用-2","link":"#如何使用-2","children":[]}]},{"level":2,"title":"单例模式（Singleton Pattern）","slug":"单例模式-singleton-pattern","link":"#单例模式-singleton-pattern","children":[{"level":3,"title":"如何使用","slug":"如何使用-3","link":"#如何使用-3","children":[]}]},{"level":2,"title":"原型模式（Prototype Pattern）","slug":"原型模式-prototype-pattern","link":"#原型模式-prototype-pattern","children":[{"level":3,"title":"如何使用","slug":"如何使用-4","link":"#如何使用-4","children":[]}]},{"level":2,"title":"建造者模式（Builder Pattern）","slug":"建造者模式-builder-pattern","link":"#建造者模式-builder-pattern","children":[{"level":3,"title":"如何使用","slug":"如何使用-5","link":"#如何使用-5","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":18.18,"words":5454},"filePathRelative":"backEnd/设计模式/创造型模式.md","localizedDate":"2023年3月23日","excerpt":"<h1> 创造型模式</h1>\\n<p>  创造型模式是设计模式中的一类，它主要用于处理对象的创建，隐藏对象的创建细节，提供更加灵活的对象创建方式，降低系统的耦合度。</p>\\n<p>&nbsp;  常见的创造型模式包括：</p>\\n<ol style=\\"padding-left: 5em;\\">\\n    <li><a href=\\"/backEnd/设计模式/创造型模式.html#简单工厂模式-simple-factory-pattern\\">简单工厂模式（Simple Factory Pattern）</a></li>\\n    <li><a href=\\"/backEnd/设计模式/创造型模式.html#工厂方法模式-factory-method-pattern\\">工厂方法模式（Factory Method Pattern）</a></li>\\n    <li><a href=\\"/backEnd/设计模式/创造型模式.html#抽象工厂模式-abstract-factory-pattern\\">抽象工厂模式（Abstract Factory Pattern）</a></li>\\n    <li><a href=\\"/backEnd/设计模式/创造型模式.html#单例模式-singleton-pattern\\">单例模式（Singleton Pattern）</a></li>\\n    <li><a href=\\"/backEnd/设计模式/创造型模式.html#原型模式-prototype-pattern\\">原型模式（Prototype Pattern）</a></li>\\n    <li><a href=\\"/backEnd/设计模式/创造型模式.html#建造者模式-builder-pattern\\">建造者模式（Builder Pattern）</a></li>\\n</ol>","autoDesc":true}');export{t as data};
