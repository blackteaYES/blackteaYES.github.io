import{_ as e,V as o,W as c,X as n,Y as s,$ as t,a0 as p,C as i}from"./framework-a71e09ed.js";const l="/assets/img/ShardingJDBC/概念&功能.png",u="/assets/img/ShardingJDBC/读写分离内容.png",r="/assets/img/ShardingJDBC/读写分离配置.png",k="/assets/img/ShardingJDBC/读写分离-yml配置.png",d="/assets/img/ShardingJDBC/寻找配置.png",m="/assets/img/ShardingJDBC/支持数据源类型.png",v="/assets/img/ShardingJDBC/原user表数据.png",g="/assets/img/ShardingJDBC/list方法结果.png",b="/assets/img/ShardingJDBC/增加.png",h="/assets/img/ShardingJDBC/插入结果.png",y="/assets/img/ShardingJDBC/修改成功1.png",f="/assets/img/ShardingJDBC/修改结果.png",S="/assets/img/ShardingJDBC/删除成功.png",w="/assets/img/ShardingJDBC/删除结果.png",_="/assets/img/ShardingJDBC/数据分片内容.png",x="/assets/img/ShardingJDBC/分片yml配置.png",C="/assets/img/ShardingJDBC/分片策略.png",q="/assets/img/ShardingJDBC/接口关系.png",U="/assets/img/ShardingJDBC/核心概念-分片.png",j="/assets/img/ShardingJDBC/数据库图.png",D="/assets/img/ShardingJDBC/新增成功.png",B="/assets/img/ShardingJDBC/新增结果.png",E="/assets/img/ShardingJDBC/修改1.png",T="/assets/img/ShardingJDBC/age测试修改.png",J="/assets/img/ShardingJDBC/删除测试.png",z="/assets/img/ShardingJDBC/查询测试结果.png",P={},N=n("h1",{id:"springboot-整合-sharding-jdbc-mysql-8-0",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#springboot-整合-sharding-jdbc-mysql-8-0","aria-hidden":"true"},"#"),s(" SpringBoot 整合 Sharding-JDBC(mysql-8.0)")],-1),R=n("h2",{id:"感谢",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#感谢","aria-hidden":"true"},"#"),s(" 感谢")],-1),L=n("p",null,"  ​从网上的资源查找后进行学习的,该项目适用于个人学习。",-1),A={href:"https://www.kuangstudy.com/zl/sharding#1369675551090008065",target:"_blank",rel:"noopener noreferrer"},M={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/sharding/",target:"_blank",rel:"noopener noreferrer"},Y=n("p",null,"  在此，非常感谢狂神及狂神飞哥的教学视频及网站文档、感谢其他开发者提供的解决问题的博客、感谢ShardingSphere团队提供的开源技术等!",-1),W={href:"https://www.kuangstudy.com/course",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.kuangstudy.com/zl/sharding#1369675551090008065",target:"_blank",rel:"noopener noreferrer"},I=p('<h2 id="文档迭代" tabindex="-1"><a class="header-anchor" href="#文档迭代" aria-hidden="true">#</a> 文档迭代</h2><table><thead><tr><th style="text-align:center;">version</th><th style="text-align:center;">功能</th><th style="text-align:center;">详细描述</th></tr></thead><tbody><tr><td style="text-align:center;">0.0.1</td><td style="text-align:center;">读写分离与数据分片(分库分表)</td><td style="text-align:center;">通过整合Sharding-JDBC实现主从数据库读写分离和分库分表进行数据分片。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="项目技术版本-技术选型" tabindex="-1"><a class="header-anchor" href="#项目技术版本-技术选型" aria-hidden="true">#</a> 项目技术版本(技术选型)</h2>',3),Q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"技术"),n("th",{style:{"text-align":"center"}},"version"),n("th",{style:{"text-align":"center"}},"描述")])],-1),$=n("tr",null,[n("td",{style:{"text-align":"center"}},"jdk"),n("td",{style:{"text-align":"center"}},"8"),n("td",{style:{"text-align":"center"}},"符合你当前选择的springboot版本就可以")],-1),F=n("tr",null,[n("td",{style:{"text-align":"center"}},"maven"),n("td",{style:{"text-align":"center"}},"3.8.1"),n("td",{style:{"text-align":"center"}},"符合你当前选择的springboot版本就可以")],-1),K=n("tr",null,[n("td",{style:{"text-align":"center"}},"springboot"),n("td",{style:{"text-align":"center"}},"2.2.2.RELEASE"),n("td",{style:{"text-align":"center"}})],-1),G=n("tr",null,[n("td",{style:{"text-align":"center"}},"Sharding-JDBC"),n("td",{style:{"text-align":"center"}},"4.0.0-RC1"),n("td",{style:{"text-align":"center"}})],-1),H=n("tr",null,[n("td",{style:{"text-align":"center"}},"mysql"),n("td",{style:{"text-align":"center"}},"8.0"),n("td",{style:{"text-align":"center"}})],-1),V=n("td",{style:{"text-align":"center"}},"其他",-1),X=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"center"}},nn={href:"https://gitee.com/zjydzyjs/spring-boot-use-case-collection/blob/master/spring-boot-sql/sharding-jdbc/pom.xml",target:"_blank",rel:"noopener noreferrer"},sn=n("h2",{id:"sharding-jdbc官网",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sharding-jdbc官网","aria-hidden":"true"},"#"),s(" Sharding-JDBC官网")],-1),an=n("h3",{id:"基础知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础知识","aria-hidden":"true"},"#"),s(" 基础知识")],-1),tn={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/overview/#sharding-jdbc",target:"_blank",rel:"noopener noreferrer"},pn=p('<h3 id="概念-功能" tabindex="-1"><a class="header-anchor" href="#概念-功能" aria-hidden="true">#</a> 概念&amp;功能</h3><p>  下图是我从官网截取来的!</p><figure><img src="'+l+'" alt="概念&amp;功能" tabindex="0" loading="lazy"><figcaption>概念&amp;功能</figcaption></figure><h2 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离" aria-hidden="true">#</a> 读写分离</h2><h3 id="读写分离内容" tabindex="-1"><a class="header-anchor" href="#读写分离内容" aria-hidden="true">#</a> 读写分离内容</h3>',5),en={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/read-write-split/concept/",target:"_blank",rel:"noopener noreferrer"},on=p('<figure><img src="'+u+'" alt="读写分离内容" tabindex="0" loading="lazy"><figcaption>读写分离内容</figcaption></figure><h3 id="数据库环境配置" tabindex="-1"><a class="header-anchor" href="#数据库环境配置" aria-hidden="true">#</a> 数据库环境配置</h3><h3 id="mysql-主从复制" tabindex="-1"><a class="header-anchor" href="#mysql-主从复制" aria-hidden="true">#</a> mysql-主从复制</h3><p>  要玩读写分离,那么你一定要有已经配置好主从复制的库,如果没有,那么我想你需要下面这个来进行配置!（任选其一）</p>',4),cn={href:"https://blog.csdn.net/weixin_43917143/article/details/120288480",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://www.jianshu.com/p/0ac6b26215b6",target:"_blank",rel:"noopener noreferrer"},un={href:"https://www.kuangstudy.com/zl/sharding#1369645557613608962",target:"_blank",rel:"noopener noreferrer"},rn=p('<h3 id="项目配置shardingjdbc" tabindex="-1"><a class="header-anchor" href="#项目配置shardingjdbc" aria-hidden="true">#</a> 项目配置ShardingJDBC</h3><h3 id="读写分离yml配置文件" tabindex="-1"><a class="header-anchor" href="#读写分离yml配置文件" aria-hidden="true">#</a> 读写分离yml配置文件</h3><figure><img src="'+r+'" alt="读写分离配置" tabindex="0" loading="lazy"><figcaption>读写分离配置</figcaption></figure>',3),kn={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/manual/sharding-jdbc/configuration/config-spring-boot/#%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB",target:"_blank",rel:"noopener noreferrer"},dn=p('<figure><img src="'+k+`" alt="读写分离-yml配置" tabindex="0" loading="lazy"><figcaption>读写分离-yml配置</figcaption></figure><p>  注意: ds1和下面的dataSourc配置其实是Map的(k,v）,所以在这里idea并不会进行代码提示,需要自己检查是否输入错误!</p><hr><h3 id="yml配置文件解析之为什么是map" tabindex="-1"><a class="header-anchor" href="#yml配置文件解析之为什么是map" aria-hidden="true">#</a> yml配置文件解析之为什么是Map?</h3><p>  进入<strong>SpringBootConfiguration</strong>类可以看到如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//</span>
<span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span>
<span class="token comment">// (powered by FernFlower decompiler)</span>
<span class="token comment">//</span>

<span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">SpringBootShardingRuleConfigurationProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SpringBootMasterSlaveRuleConfigurationProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SpringBootEncryptRuleConfigurationProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SpringBootPropertiesConfigurationProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>
    prefix <span class="token operator">=</span> <span class="token string">&quot;spring.shardingsphere&quot;</span><span class="token punctuation">,</span>
    name <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;enabled&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>
    matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">EnvironmentAware</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SpringBootShardingRuleConfigurationProperties</span> shardingProperties<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SpringBootMasterSlaveRuleConfigurationProperties</span> masterSlaveProperties<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SpringBootEncryptRuleConfigurationProperties</span> encryptProperties<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SpringBootPropertiesConfigurationProperties</span> propMapProperties<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DataSource</span><span class="token punctuation">&gt;</span></span> dataSourceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ShardingRuleConfigurationYamlSwapper</span> shardingSwapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingRuleConfigurationYamlSwapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MasterSlaveRuleConfigurationYamlSwapper</span> masterSlaveSwapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MasterSlaveRuleConfigurationYamlSwapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EncryptRuleConfigurationYamlSwapper</span> encryptSwapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncryptRuleConfigurationYamlSwapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// 它通过实现EnvironmentAware接口来获取配置文件中的配置属性,这里就获取了</span>
    <span class="token comment">// spring.shardingsphere.datasource.下的属性</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token string">&quot;spring.shardingsphere.datasource.&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 拿到我这里的 ds1,ds2</span>
        <span class="token class-name">Iterator</span> var3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataSourceNames</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 通过while 遍历获得每个具体的数据源配置,将数据源配置根据k,v存入 dataSourceMap</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> each <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// DataSource属性获得,put进入 dataSourceMap,说明</span>
                <span class="token comment">//  private final Map&lt;String, DataSource&gt; dataSourceMap = new LinkedHashMap();</span>
                <span class="token comment">// 就是存放数据源配置的属性</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span> dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> each<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ReflectiveOperationException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ShardingException</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t find datasource type!&quot;</span><span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// 获取数据源名称集合(例如我这里的 ds1,ds2)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDataSourceNames</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StandardEnvironment</span> standardEnv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StandardEnvironment</span><span class="token punctuation">)</span>environment<span class="token punctuation">;</span>
        standardEnv<span class="token punctuation">.</span><span class="token function">setIgnoreUnresolvableNestedPlaceholders</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">==</span> standardEnv<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InlineExpressionParser</span><span class="token punctuation">(</span>standardEnv<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;names&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitAndEvaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>standardEnv<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">// 获取对应数据源名称的数据源配置</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> dataSourceName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ReflectiveOperationException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dataSourceProps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token class-name">PropertyUtil</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> prefix <span class="token operator">+</span> dataSourceName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token operator">!</span>dataSourceProps<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong datasource properties!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">DataSourceUtil</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span>dataSourceProps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataSourceProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  你如果好奇我是怎么找到的<strong>SpringBootConfiguration</strong>?</p><p>  请你先进入配置文件,例如我这里的 <strong>application-readwrite.yml</strong>,</p><p>  1. 按住ctrl + 选择spring.shardingsphere.datasource.names,然后点击鼠标左键就可以进入类了。</p><p>  2. 通过寻找<code>sharding-jdbc-spring-boot-starter-4.0.0-RC1.jar</code>配置中的自动配置类。</p><figure><img src="`+d+'" alt="寻找配置" tabindex="0" loading="lazy"><figcaption>寻找配置</figcaption></figure><p>  我个人是建议你一定要会第二种,虽然第一种很方便,这就像那啥,你可以不用但不能不会，并且这个方法对看自动配置原理很有用。</p><hr><h3 id="配置文件解析是map的话-那我这个数据源该怎么配置-和单个数据源有什么不同" tabindex="-1"><a class="header-anchor" href="#配置文件解析是map的话-那我这个数据源该怎么配置-和单个数据源有什么不同" aria-hidden="true">#</a> 配置文件解析是Map的话,那我这个数据源该怎么配置,和单个数据源有什么不同?</h3><h4 id="_1-那我这个数据源该怎么配置" tabindex="-1"><a class="header-anchor" href="#_1-那我这个数据源该怎么配置" aria-hidden="true">#</a> 1. 那我这个数据源该怎么配置？</h4><p>  按照官网说的支持如下图:</p><figure><img src="'+m+'" alt="支持数据源类型" tabindex="0" loading="lazy"><figcaption>支持数据源类型</figcaption></figure><p>  你只要选择它支持的数据库连接池的配置就可以了。</p><h4 id="_2-单个数据源有什么不同" tabindex="-1"><a class="header-anchor" href="#_2-单个数据源有什么不同" aria-hidden="true">#</a> 2. 单个数据源有什么不同?</h4><p>  几乎没什么不同,除了从原来的单个类,变成<code>Map&lt;String,类&gt;</code>,就是数据结构上稍微变动,数据源内的具体配置还是那个类,不需要变动。</p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>  好了,到了这里了我们就假设你已经配置好了mysql-主从复制和yml配置了,没有配置好的请配置完成再看!</p><p>  现在的数据如下图：原user表数据:</p><figure><img src="'+v+`" alt="原user表数据" tabindex="0" loading="lazy"><figcaption>原user表数据</figcaption></figure><p>  左主右从，接下来我们先查询以下,是不是从<strong>从库</strong> <em>查询</em>，然后 <em>新增、修改、删除</em> 都在<strong>主库</strong>完成。</p><h2 id="单元测试效果-读写分离" tabindex="-1"><a class="header-anchor" href="#单元测试效果-读写分离" aria-hidden="true">#</a> 单元测试效果(读写分离)</h2><p>  单元测试方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blacktea<span class="token punctuation">.</span>shardingjdbc</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blacktea<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>entites<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blacktea<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Rollback</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingJdbcReadWriteTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;size:{},从库查询全部数据:{}&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@Transactional</span>
    <span class="token comment">// 因为JUnit使用 @Transactional会自动开启事务,即没有报错也会执行事务,所以需要 @Rollback(false)关闭事务</span>
    <span class="token annotation punctuation">@Rollback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;读写分离添加!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;主库添加结果:{}&quot;</span><span class="token punctuation">,</span>userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        int i = 1/0;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;读写分离添加!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>userQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;读写分离修改!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;主库修改结果:{}&quot;</span><span class="token punctuation">,</span>userService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span><span class="token number">1440877837299494914L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;主库删除结果:{}&quot;</span><span class="token punctuation">,</span>userService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询-从库操作" tabindex="-1"><a class="header-anchor" href="#查询-从库操作" aria-hidden="true">#</a> 查询 - 从库操作</h3><p>  执行方法<code>list()</code>,结果如下图:</p><figure><img src="`+g+'" alt="list方法结果" tabindex="0" loading="lazy"><figcaption>list方法结果</figcaption></figure><p>  ds2 根据yml配置可以得知,确实是从库的配置。</p><p>​  那么<strong>ShardingJdbc</strong>读写分离也确实是从<code>从库</code>中查询数据。</p><h3 id="增加、删除、修改-主库" tabindex="-1"><a class="header-anchor" href="#增加、删除、修改-主库" aria-hidden="true">#</a> 增加、删除、修改 - 主库</h3><figure><img src="'+b+'" alt="增加" tabindex="0" loading="lazy"><figcaption>增加</figcaption></figure><p>  注意: 我在测试增加的时候发现了一个问题,<em>Committed transaction for test</em>，他会自动进行回滚,导致数据库中并没有插入数据,但是该结果返回的是true,</p><p>  后来我查询资料后发现 因为<strong>JUnit使用 @Transactional会自动开启事务,即没有报错也会执行事务,所以需要 @Rollback(false)关闭事务</strong>了。</p><p>  资料如下:</p>',38),mn={href:"https://blog.csdn.net/jinbaizhe/article/details/81055495",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://blog.csdn.net/u013107634/article/details/108888818",target:"_blank",rel:"noopener noreferrer"},gn=p('<h4 id="插入成功" tabindex="-1"><a class="header-anchor" href="#插入成功" aria-hidden="true">#</a> 插入成功</h4><figure><img src="'+h+'" alt="插入结果" tabindex="0" loading="lazy"><figcaption>插入结果</figcaption></figure><h4 id="修改成功" tabindex="-1"><a class="header-anchor" href="#修改成功" aria-hidden="true">#</a> 修改成功</h4><figure><img src="'+y+'" alt="修改成功1" tabindex="0" loading="lazy"><figcaption>修改成功1</figcaption></figure><figure><img src="'+f+'" alt="修改结果" tabindex="0" loading="lazy"><figcaption>修改结果</figcaption></figure><h4 id="删除成功" tabindex="-1"><a class="header-anchor" href="#删除成功" aria-hidden="true">#</a> 删除成功</h4><figure><img src="'+S+'" alt="删除成功" tabindex="0" loading="lazy"><figcaption>删除成功</figcaption></figure><figure><img src="'+w+'" alt="删除结果" tabindex="0" loading="lazy"><figcaption>删除结果</figcaption></figure><p>  OK,那么读写分离入门那就结束了！</p><hr><h2 id="数据分片" tabindex="-1"><a class="header-anchor" href="#数据分片" aria-hidden="true">#</a> 数据分片</h2><h3 id="数据分片内容" tabindex="-1"><a class="header-anchor" href="#数据分片内容" aria-hidden="true">#</a> 数据分片内容</h3>',12),bn={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/sharding/",target:"_blank",rel:"noopener noreferrer"},hn=n("figure",null,[n("img",{src:_,alt:"数据分片内容",tabindex:"0",loading:"lazy"}),n("figcaption",null,"数据分片内容")],-1),yn=n("hr",null,null,-1),fn=n("h6",{id:"分片配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分片配置","aria-hidden":"true"},"#"),s(" 分片配置")],-1),Sn=n("figure",null,[n("img",{src:x,alt:"分片yml配置",tabindex:"0",loading:"lazy"}),n("figcaption",null,"分片yml配置")],-1),wn={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/manual/sharding-jdbc/configuration/config-spring-boot/#%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87",target:"_blank",rel:"noopener noreferrer"},_n=p(`<p>  注意:</p><p>​  1. sub1：表示分库又分表;</p><p>​  2. sub2表示：(分库而固定表)或(固定库而分表);</p><hr><h3 id="yml配置说明" tabindex="-1"><a class="header-anchor" href="#yml配置说明" aria-hidden="true">#</a> yml配置说明</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>
    <span class="token comment"># 参数配置，显示sql</span>
    <span class="token key atrule">props</span><span class="token punctuation">:</span>
      <span class="token key atrule">sql</span><span class="token punctuation">:</span>
        <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 配置数据源</span>
    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
      <span class="token comment"># 给每个数据源取别名，下面的ds1,ds2任意取名字</span>
      <span class="token key atrule">names</span><span class="token punctuation">:</span> ds0<span class="token punctuation">,</span>ds1
      <span class="token comment"># 给master-ds1每个数据源配置数据库连接信息</span>
      <span class="token key atrule">ds0</span><span class="token punctuation">:</span>
        <span class="token comment"># 配置druid数据源</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.168.101<span class="token punctuation">:</span>3306/sharding_sphere<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> mysql8.0
        <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">100</span>
        <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token comment"># 配置ds2-slave</span>
      <span class="token key atrule">ds1</span><span class="token punctuation">:</span>
        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/sharding_sphere<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;tinyInt1isBit=false&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span>
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
        <span class="token key atrule">password</span><span class="token punctuation">:</span> mysql8.0
        <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">100</span>
        <span class="token key atrule">minPoolSize</span><span class="token punctuation">:</span> <span class="token number">5</span>
    <span class="token key atrule">sharding</span><span class="token punctuation">:</span>
      <span class="token comment"># 配置分表的规则</span>
      <span class="token key atrule">tables</span><span class="token punctuation">:</span>
        <span class="token comment"># user 逻辑表名</span>
        <span class="token key atrule">sys_user</span><span class="token punctuation">:</span>
          <span class="token key atrule">key-generator</span><span class="token punctuation">:</span>
            <span class="token comment"># 主键的列明，</span>
            <span class="token key atrule">column</span><span class="token punctuation">:</span> id
            <span class="token key atrule">type</span><span class="token punctuation">:</span> SNOWFLAKE
          <span class="token comment"># 数据节点：数据源$-&gt;{0..N}.逻辑表名$-&gt;{0..N}</span>
          <span class="token key atrule">actual-data-nodes</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.sys_user$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>
          <span class="token comment"># 拆分库策略，也就是什么样子的数据放入放到哪个数据库中。</span>
          <span class="token key atrule">database-strategy</span><span class="token punctuation">:</span>
            <span class="token key atrule">inline</span><span class="token punctuation">:</span>
              <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> sex    <span class="token comment"># 分片字段（分片键）</span>
              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>sex % 2<span class="token punctuation">}</span> <span class="token comment"># 分片算法表达式</span>
          <span class="token comment"># 拆分表策略，也就是什么样子的数据放入放到哪个数据表中。</span>
          <span class="token key atrule">table-strategy</span><span class="token punctuation">:</span>
            <span class="token comment"># 按出生日期中的年份进行分表</span>
<span class="token comment">#            standard:</span>
<span class="token comment">#              shardingColumn: date_birth # 字段名不存在默认 sys_user全匹配 添加</span>
<span class="token comment">#              preciseAlgorithmClassName: com.blacktea.shardingjdbc.config.BirthdayAlgorithm</span>
            <span class="token comment"># 按年龄进行分表</span>
            <span class="token key atrule">inline</span><span class="token punctuation">:</span>
              <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> age    <span class="token comment"># 分片字段（分片键）</span>
              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> sys_user$<span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token punctuation">{</span>age % 2<span class="token punctuation">}</span> <span class="token comment"># 分片算法表达式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  <code>spring.shardingsphere.sharding.tables</code> : 表示对表进行分片(含分库和同库分表)。</p>`,7),xn=n("strong",null,"SpringBootShardingRuleConfigurationProperties",-1),Cn={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/sharding/concept/configuration/",target:"_blank",rel:"noopener noreferrer"},qn=p(`<p>  SpringBootShardingRuleConfigurationProperties 解析如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>sharding</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>core<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>config<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span></span><span class="token class-name">YamlShardingRuleConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>
    prefix <span class="token operator">=</span> <span class="token string">&quot;spring.shardingsphere.sharding&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootShardingRuleConfigurationProperties</span> <span class="token keyword">extends</span> <span class="token class-name">YamlShardingRuleConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SpringBootShardingRuleConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  其实值都在父类 <strong>YamlShardingRuleConfiguration</strong>里 如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>core<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>config<span class="token punctuation">.</span>sharding</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlShardingRuleConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">YamlConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">// tables 逻辑表名 - k 对应 sys_user, v对应其他</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">YamlTableRuleConfiguration</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bindingTables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> broadcastTables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultDataSourceName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlShardingStrategyConfiguration</span> defaultDatabaseStrategy<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlShardingStrategyConfiguration</span> defaultTableStrategy<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlKeyGeneratorConfiguration</span> defaultKeyGenerator<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">YamlMasterSlaveRuleConfiguration</span><span class="token punctuation">&gt;</span></span> masterSlaveRules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlEncryptRuleConfiguration</span> encryptRule<span class="token punctuation">;</span>

   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  <strong>YamlTableRuleConfiguration</strong>又包含了对应的表策略、库策略、表主键生成等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>core<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>config<span class="token punctuation">.</span>sharding</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlTableRuleConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">YamlConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> logicTable<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> actualDataNodes<span class="token punctuation">;</span>
    <span class="token comment">// 分表策略</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlShardingStrategyConfiguration</span> databaseStrategy<span class="token punctuation">;</span>
    <span class="token comment">// 分库策略</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlShardingStrategyConfiguration</span> tableStrategy<span class="token punctuation">;</span>
    <span class="token comment">// 表主键生成</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlKeyGeneratorConfiguration</span> keyGenerator<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> logicIndex<span class="token punctuation">;</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  策略对象都是同一个类<strong>YamlShardingStrategyConfiguration</strong>,里面包含了5个ShardingStrategy配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>core<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span>config<span class="token punctuation">.</span>sharding</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlShardingStrategyConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">YamlConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlStandardShardingStrategyConfiguration</span> standard<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlComplexShardingStrategyConfiguration</span> complex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlHintShardingStrategyConfiguration</span> hint<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlInlineShardingStrategyConfiguration</span> inline<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">YamlNoneShardingStrategyConfiguration</span> none<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),Un={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/sharding/concept/sharding/",target:"_blank",rel:"noopener noreferrer"},jn=p('<figure><img src="'+C+'" alt="分片策略" tabindex="0" loading="lazy"><figcaption>分片策略</figcaption></figure><p>  对应yml中的</p><p>   <code>spring.shardingsphere.sharding.tables.sys_user.database-strategy</code></p><p>  与</p><p>  <code>spring.shardingsphere.sharding.tables.sys_user.table-strategy</code></p><p>  这里的策略有5种,我在配置中只实现了两种,因为我是根据<strong>飞哥</strong>的文档进行学习的,其他几种就没尝试,以后有机会在补吧。</p><p>  我这里常用的就是<em>inline</em>和<em>standard</em>。</p>',7),Dn={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/sharding/other-features/inline-expression/",target:"_blank",rel:"noopener noreferrer"},Bn=n("p",null,[s("  strategy 使用参考 "),n("em",null,"application-sub1.yml"),s("中的strategy")],-1),En={href:"https://gitee.com/zjydzyjs/spring-boot-use-case-collection/blob/master/spring-boot-sql/sharding-jdbc/src/main/java/com/blacktea/shardingjdbc/config/BirthdayAlgorithm.java#",target:"_blank",rel:"noopener noreferrer"},Tn=n("p",null,"  该类通过实现{@link org.apache.shardingsphere.api.sharding.standard.PreciseShardingAlgorithm}接口实现.   doSharding()方法的返回值就是你配置的库或表的实际sql名称。",-1),Jn=n("p",null,"  strategy 其他实现方式,可以通过源码看到如下图(接口关系)。",-1),zn=n("figure",null,[n("img",{src:q,alt:"接口关系",tabindex:"0",loading:"lazy"}),n("figcaption",null,"接口关系")],-1),Pn=n("p",null,[s("  都是通过实现顶层接口 "),n("em",null,"ShardingAlgorithm"),s("。")],-1),Nn={href:"https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/sharding/concept/sharding/",target:"_blank",rel:"noopener noreferrer"},Rn=p('<figure><img src="'+U+'" alt="核心概念-分片" tabindex="0" loading="lazy"><figcaption>核心概念-分片</figcaption></figure><p>  分片算法有四种!</p><p>  具体想要用那个根据自己的业务去决定吧!</p><h3 id="数据库准备" tabindex="-1"><a class="header-anchor" href="#数据库准备" aria-hidden="true">#</a> 数据库准备</h3><p>​  1. 准备两个及以上的数据库,我这里准备的是虚拟机-mysql和本地-mysql,你可以按自己的条件准备,只要存在两个库就行;</p><p>  2. 数据库中需要存有相同且与yml中配置的满足库与表策略的表,</p><p>  例如我这里的，如下:</p><figure><img src="'+j+`" alt="数据库图" tabindex="0" loading="lazy"><figcaption>数据库图</figcaption></figure><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 创建语句,其他表就是名字不一样而已
CREATE TABLE \`sys_user0\` (
  \`id\` bigint NOT NULL,
  \`user_name\` varchar(255) NOT NULL COMMENT &#39;账号名称&#39;,
  \`password\` varchar(255) NOT NULL COMMENT &#39;密码&#39;,
  \`age\` int DEFAULT NULL COMMENT &#39;年龄&#39;,
  \`date_birth\` datetime DEFAULT NULL COMMENT &#39;出生日期&#39;,
  \`sex\` int DEFAULT NULL COMMENT &#39;1:男,2:女&#39;,
  PRIMARY KEY (\`id\`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单元测试效果-数据分片" tabindex="-1"><a class="header-anchor" href="#单元测试效果-数据分片" aria-hidden="true">#</a> 单元测试效果（数据分片）</h2><p>  ​我写了个用例：<code>com.blacktea.shardingjdbc.ShardingJdbcSub1Tests</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blacktea<span class="token punctuation">.</span>shardingjdbc</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>update<span class="token punctuation">.</span></span><span class="token class-name">UpdateWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blacktea<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>entites<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>blacktea<span class="token punctuation">.</span>shardingjdbc<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">SysUserService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingJdbcSub1Tests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SysUserService</span> sysUserService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SysUser</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> ds_index<span class="token punctuation">,</span><span class="token keyword">int</span> table_index<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ds 索引是根据 ds$-&gt;{sex % 2} # 分片算法表达式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ds_index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sysUser<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            sysUser<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// table 索引 是根据 sys_user$-&gt;{age % 2} # 分片算法表达式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>table_index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sysUser<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            sysUser<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sysUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;******&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sysUser<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;测试分库分表-&quot;</span><span class="token operator">+</span>sysUser<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;-&quot;</span><span class="token operator">+</span>sysUser<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sysUser<span class="token punctuation">.</span><span class="token function">setDateBirth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sysUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
<span class="token comment">//    @Transactional(rollbackFor = Exception.class)</span>
    <span class="token keyword">void</span> <span class="token function">createDs0_sysUser0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> save <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        int i = 1/0;</span>
        <span class="token comment">// 单库 Transactional 有效</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">createDs0_sysUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> save <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">createDs1_sysUser0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> save <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">createDs1_sysUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> save <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
<span class="token comment">//    @Transactional(rollbackFor = Exception.class)</span>
<span class="token comment">//    @ShardingTransactionType(TransactionType.XA)</span>
    <span class="token keyword">void</span> <span class="token function">batchAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createDs0_sysUser0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createDs0_sysUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createDs1_sysUser0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createDs1_sysUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//  @Transactional，这样跨库同样支持,不需要XA</span>
<span class="token comment">//        int i = 1/0;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        updateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 测试根据age的为22并修改该集合判断如何修改多库多表的?</span>
        <span class="token comment">// 从打印的sql可以发现,它是从配置中的所有 ds$.table$ 进行符合策略遍历修改</span>
        <span class="token comment">// 结果并不会,只在原表基础上更新数据！</span>
        updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sysUserService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 结论：如果你要修改该策略值(不再匹配策略故障那种)怎么办?</span>
        <span class="token comment">// 例如： table=sys_user+ age % 2 -&gt; sys_user0表示偶数,sys_user1表示奇数</span>
        <span class="token comment">// 1. 假如 库0-sys_user0中的age=22,你要改成23,那么你应该要换到库0-sys_user1中</span>
        <span class="token comment">// 不换的话,以后再根据age=22就再也查不到这条数据了进行更改了,因为它根本不会匹配到该表</span>
        <span class="token comment">// 本质的话: 该表不应该存在不同于该分表或分库策略的记录,即使是修改出来的也不应该存在!</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 与修改存在一样的问题
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        query<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sysUserService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 从打印的sql 日志可以发现它是从配置中的所有 ds$.table$ 进行遍历查询,最后将结果汇总</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;size:{},库查询全部数据:{}&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">long</span> current<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> sysUserPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            sysUserPage <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>sysUserPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> sysUserPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;size:{},当前第{}页,数据:{}&quot;</span><span class="token punctuation">,</span> records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> current<span class="token punctuation">,</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            current<span class="token operator">++</span><span class="token punctuation">;</span>
            sysUserPage<span class="token punctuation">.</span><span class="token function">setCurrent</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>sysUserPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新增" tabindex="-1"><a class="header-anchor" href="#新增" aria-hidden="true">#</a> 新增</h3><p>  执行createDs0_sysUser0()，正常效果是在ds0的sys_user表生成一条数据,</p><figure><img src="`+D+'" alt="新增成功" tabindex="0" loading="lazy"><figcaption>新增成功</figcaption></figure><p>  然后我又运行了 <strong>createDs0_sysUser1()<strong>和</strong>createDs1_sysUser0()</strong>，我就不放用例执行图了，直接放结果吧，如下图:</p><figure><img src="'+B+'" alt="新增结果" tabindex="0" loading="lazy"><figcaption>新增结果</figcaption></figure><h3 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h3><p>​  那新增是按照策略不同进行分库分表的,那么修改、删除呢? ​来,上用例!</p><p>​<img src="'+E+'" alt="修改1" loading="lazy"></p><p>  从sql日志中可以发现在两个库的四个表都执行了修改语句,当前修改根据 <em>user_name</em>,该值是没有配置在yml的库表策略里的;</p><p>  那么我们换一下,换成有配置的 <em>age</em>进行测试。</p><figure><img src="'+T+'" alt="age测试修改" tabindex="0" loading="lazy"><figcaption>age测试修改</figcaption></figure><p>  你会发现它就执行了age%2对应的表,这里也就是<em>sys_user0</em>,没有执行<em>sys_user1</em>,直接出现脏数据!</p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><figure><img src="'+J+'" alt="删除测试" tabindex="0" loading="lazy"><figcaption>删除测试</figcaption></figure><p>  与修改一样存在相同问题!!!</p><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询" aria-hidden="true">#</a> 查询</h3><figure><img src="'+z+'" alt="查询测试结果" tabindex="0" loading="lazy"><figcaption>查询测试结果</figcaption></figure><p>  与修改一样存在相同问题!!!</p><h3 id="修改、删除、查询需注意" tabindex="-1"><a class="header-anchor" href="#修改、删除、查询需注意" aria-hidden="true">#</a> 修改、删除、查询需注意</h3><p>  通过<strong>修改</strong>(包括删除、查询)的测试发现，好家伙，这不是完犊子了么？</p><p>  如果我不小心使用未配置的字段进行所有表的修改，然后就会漏改一些配置不到的库表，额......。</p><p>  所以进行更新的时候一定要注意是否是策略字段!</p><p>  如果是策略字段，在修改策略字段对应值(表值)的时候，不要修改成非该表配置策略对应的值，这样会导致该条记录失去以该策略字段修改的功能!!!（因为匹配不到该表)!</p><p>  怎么解决?</p><p>  其实通过<strong>Sharding-JDBC</strong>查询是不会查出那些脏数据的,但是你自己在数据库中可以看到,这就很难受,不是吗!!!</p><p>  其实这也是你自己操作的不规范,因为你自己配置了库表策略了,还这样进行修改、删除和查询!!!</p><p>  1. 在修改完事后，根据策略进行移库移表等操作!</p><p>  简单点,就是删除该数据,再插入该数据,会自动根据策略存储库表的。</p><p>  2. 不要进行存有策略的字段的修改,就算修改也尽量修改为同样策略运算结果后同库同表的值!</p><p>  简单点,就是 age%2 原本等于几现在就要等于几</p><p>  3. 待大佬补充......</p>',43);function Ln(An,Mn){const a=i("ExternalLinkIcon");return o(),c("div",null,[N,R,L,n("p",null,[s("  B站、CSDN、简书、GitHub、Gitee、"),n("a",A,[s("ShardingShpere数据库中间件- 专栏 -KuangStudy"),t(a)]),s("、"),n("a",M,[s("数据分片 :: ShardingSphere"),t(a)])]),Y,n("p",null,[s("  需要进行视频学习的小伙伴可以去B站搜索狂神说Java或"),n("a",W,[s("狂神自己的网站学习"),t(a)])]),n("p",null,[s("  我很多都是基于"),n("a",O,[s("ShardingShpere数据库中间件- 专栏 -KuangStudy"),t(a)]),s("去进行学习的!")]),I,n("table",null,[Q,n("tbody",null,[$,F,K,G,H,n("tr",null,[V,X,n("td",Z,[s("参考maven,"),n("a",nn,[s("pom配置"),t(a)])])])])]),sn,an,n("p",null,[s("  基础知识了解可以自己去阅读下"),n("a",tn,[s("文档"),t(a)]),s("，我搬运过来也没有什么意义!")]),pn,n("p",null,[s("  "),n("a",en,[s("读写分离核心概念地址"),t(a)])]),on,n("p",null,[s("  1. "),n("a",cn,[s("基于Docker 配置主从服务器实现 mysql主从复制（8.0版本）_meng前行的博客-CSDN博客"),t(a)])]),n("p",null,[s("  2. "),n("a",ln,[s("基于Docker 配置主从服务器实现 mysql主从复制(8.0) - 简书"),t(a)])]),n("p",null,[s("  这是我自己根据"),n("a",un,[s("ShardingShpere数据库中间件- 专栏 -KuangStudy"),t(a)]),s("写的博客。")]),rn,n("p",null,[s("  "),n("a",kn,[s("官网中的读写分离配置"),t(a)])]),dn,n("p",null,[s("​  1. "),n("a",mn,[s("https://blog.csdn.net/jinbaizhe/article/details/81055495"),t(a)])]),n("p",null,[s("​  2. "),n("a",vn,[s("https://blog.csdn.net/u013107634/article/details/108888818"),t(a)])]),gn,n("p",null,[s("  "),n("a",bn,[s("数据分片官方知识"),t(a)])]),hn,yn,fn,Sn,n("p",null,[s("  "),n("a",wn,[s("官网中的读写分离配置"),t(a)])]),_n,n("p",null,[s("  具体配置可以参考 "),xn,s("类与"),n("a",Cn,[s("文档"),t(a)]),s("。")]),qn,n("p",null,[s("  对应文档中的3.1数据分片下的分片中的"),n("a",Un,[s("分片策略"),t(a)]),s(" 5 种")]),jn,n("p",null,[s("  inline 使用参考官网 "),n("a",Dn,[s("3.1.4. 其他功能"),t(a)])]),Bn,n("p",null,[s("  使用的策略类："),n("a",En,[s("com.blacktea.shardingjdbc.config.BirthdayAlgorithm"),t(a)])]),Tn,Jn,zn,Pn,n("p",null,[s("  其实你从官网文档的 3.1.1. 核心概念 的 "),n("a",Nn,[s("分片"),t(a)]),s("也可以找到,如下图:")]),Rn])}const Wn=e(P,[["render",Ln],["__file","SpringBoot整合Sharding-JDBC.html.vue"]]);export{Wn as default};
