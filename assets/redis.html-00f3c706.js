import{_ as p,V as c,W as i,X as n,Y as s,$ as e,a0 as t,C as o}from"./framework-a71e09ed.js";const l="/assets/img/redis/redis基本数据结构.png",u="/assets/img/redis/redis数据结构简单图1.png",r="/assets/img/redis/跳表图.png",d="/assets/img/redis/用户基础信息.png",k="/assets/img/redis/指定用户订阅文章.png",m="/assets/img/redis/随机抽奖.png",v="/assets/img/redis/可能认识的人.png",b="/assets/img/redis/战力榜.png",h="/assets/img/redis/定期删除的特点.png",y={},g=n("h1",{id:"redis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis","aria-hidden":"true"},"#"),s(" Redis")],-1),f={href:"https://www.jianshu.com/p/3673f055bb3f",target:"_blank",rel:"noopener noreferrer"},w=t('<figure><img src="'+l+'" alt="redis基本数据结构" tabindex="0" loading="lazy"><figcaption>redis基本数据结构</figcaption></figure><figure><img src="'+u+'" alt="redis数据结构简单图1" tabindex="0" loading="lazy"><figcaption>redis数据结构简单图1</figcaption></figure><figure><img src="'+r+'" alt="跳表图" tabindex="0" loading="lazy"><figcaption>跳表图</figcaption></figure><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h2><h3 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>SET key value [EX seconds] [PX milliseconds] [NX|XX]</td><td>将字符串值 value 关联到 key 。<br><br>如果 key 已经持有其他值， SET 就覆写旧值， 无视类型。<br><br>当 SET 命令对一个带有生存时间（TTL）的键进行设置之后， 该键原有的 TTL 将被清除。<br><br>可选参数<br>从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：<br><br>EX seconds ： 将键的过期时间设置为 seconds 秒。 执行 SET key value EX seconds 的效果等同于执行 SETEX key seconds value 。<br><br>PX milliseconds ： 将键的过期时间设置为 milliseconds 毫秒。 执行 SET key value PX milliseconds 的效果等同于执行 PSETEX key milliseconds value 。<br><br>NX ： 只在键不存在时， 才对键进行设置操作。 执行 SET key value NX 的效果等同于执行 SETNX key value 。<br><br>XX ： 只在键已经存在时， 才对键进行设置操作。<br><br>Note<br><br>因为 SET 命令可以通过参数来实现 SETNX 、 SETEX 以及 PSETEX 命令的效果， 所以 Redis 将来的版本可能会移除并废弃 SETNX 、 SETEX 和 PSETEX 这三个命令。<br><br>返回值<br>在 Redis 2.6.12 版本以前， SET 命令总是返回 OK 。<br><br>从 Redis 2.6.12 版本开始， SET 命令只在设置操作成功完成时才返回 OK ； 如果命令使用了 NX 或者 XX 选项， 但是因为条件没达到而造成设置操作未执行， 那么命令将返回空批量回复（NULL Bulk Reply）。</td></tr><tr><td>GET key</td><td>返回与键 key 相关联的字符串值。<br><br>返回值<br>如果键 key 不存在， 那么返回特殊值 nil ； 否则， 返回键 key 的值。<br><br>如果键 key 的值并非字符串类型， 那么返回一个错误， 因为 GET 命令只能用于字符串值。</td></tr><tr><td>STRLEN key</td><td>返回键 key 储存的字符串值的长度。<br><br>返回值<br>STRLEN 命令返回字符串值的长度。<br><br>当键 key 不存在时， 命令返回 0 。<br><br>当 key 储存的不是字符串值时， 返回一个错误。</td></tr><tr><td>DECR key</td><td>为键 key 储存的数字值减去一。<br><br>如果键 key 不存在， 那么键 key 的值会先被初始化为 0 ， 然后再执行 DECR 操作。<br><br>如果键 key 储存的值不能被解释为数字， 那么 DECR 命令将返回一个错误。<br><br>本操作的值限制在 64 位(bit)有符号数字表示之内。<br><br>关于递增(increment) / 递减(decrement)操作的更多信息， 请参见 INCR 命令的文档。<br><br>返回值<br>DECR 命令会返回键 key 在执行减一操作之后的值。</td></tr><tr><td>INCR key</td><td>为键 key 储存的数字值加上一。<br><br>如果键 key 不存在， 那么它的值会先被初始化为 0 ， 然后再执行 INCR 命令。<br><br>如果键 key 储存的值不能被解释为数字， 那么 INCR 命令将返回一个错误。<br><br>本操作的值限制在 64 位(bit)有符号数字表示之内。<br><br>Note<br><br>INCR 命令是一个针对字符串的操作。 因为 Redis 并没有专用的整数类型， 所以键 key 储存的值在执行 INCR 命令时会被解释为十进制 64 位有符号整数。<br><br>返回值<br>INCR 命令会返回键 key 在执行加一操作之后的值。</td></tr></tbody></table><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><ol><li>分布式锁(setnx)</li><li>递增、递减（点赞数（只是统计被点赞总数））</li></ol><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h2><p>对应java的 <strong>Map&lt;String, Map&lt;K, V&gt;&gt;</strong> 结构。</p><h3 id="常用指令-1" tabindex="-1"><a class="header-anchor" href="#常用指令-1" aria-hidden="true">#</a> 常用指令</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>HSET hash field value</td><td>将哈希表 hash 中域 field 的值设置为 value 。<br><br>如果给定的哈希表并不存在， 那么一个新的哈希表将被创建并执行 HSET 操作。<br><br>如果域 field 已经存在于哈希表中， 那么它的旧值将被新值 value 覆盖。</td></tr><tr><td>HGET hash field</td><td>返回哈希表中给定域的值。</td></tr><tr><td>HMSET key field value [field value …]</td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。<br><br>此命令会覆盖哈希表中已存在的域。<br><br>如果 key 不存在，一个空哈希表被创建并执行 HMSET 操作。</td></tr><tr><td>HMGET key field [field …]</td><td>返回哈希表 key 中，一个或多个给定域的值。<br><br>如果给定的域不存在于哈希表，那么返回一个 nil 值。<br><br>因为不存在的 key 被当作一个空哈希表来处理，所以对一个不存在的 key 进行 HMGET 操作将返回一个只带有 nil 值的表。</td></tr><tr><td>HGETALL</td><td>返回哈希表 key 中，所有的域和值。<br><br>在返回值里，紧跟每个域名(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。</td></tr><tr><td>HLEN key</td><td>返回哈希表 key 中域的数量。</td></tr><tr><td>HDEL key field [field …]</td><td>删除哈希表 <code>key</code> 中的一个或多个指定域，不存在的域将被忽略。</td></tr><tr><td>HEXISTS hash field</td><td>检查给定域 <code>field</code> 是否存在于哈希表 <code>hash</code> 当中。</td></tr></tbody></table><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h3><p>购物车场景，存储用户基础信息。</p><p>例如：</p><figure><img src="'+d+'" alt="用户基础信息" tabindex="0" loading="lazy"><figcaption>用户基础信息</figcaption></figure><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> list</h2><p>list是有序的，且可以重复的。</p><h3 id="常用指令-2" tabindex="-1"><a class="header-anchor" href="#常用指令-2" aria-hidden="true">#</a> 常用指令</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>LLEN key</td><td>返回列表 key 的长度。<br><br>如果 key 不存在，则 key 被解释为一个空列表，返回 0 .<br><br>如果 key 不是列表类型，返回一个错误。</td></tr><tr><td>LPOP key</td><td>移除并返回列表 <code>key</code> 的头元素。</td></tr><tr><td>LREM key count value</td><td>根据参数 count 的值，移除列表中与参数 value 相等的元素。<br><br>count 的值可以是以下几种：<br><br>count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。<br><br>count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。<br><br>count = 0 : 移除表中所有与 value 相等的值。</td></tr><tr><td>LPUSH key value [value …]</td><td>将一个或多个值 value 插入到列表 key 的表头<br><br>如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表头： 比如说，对空列表 mylist 执行命令 LPUSH mylist a b c ，列表的值将是 c b a ，这等同于原子性地执行 LPUSH mylist a 、 LPUSH mylist b 和 LPUSH mylist c 三个命令。<br><br>如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。<br><br>当 key 存在但不是列表类型时，返回一个错误。</td></tr><tr><td>RPUSH key value [value …]</td><td>将一个或多个值 value 插入到列表 key 的表尾(最右边)。<br><br>如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表尾：比如对一个空列表 mylist 执行 RPUSH mylist a b c ，得出的结果列表为 a b c ，等同于执行命令 RPUSH mylist a 、 RPUSH mylist b 、 RPUSH mylist c 。<br><br>如果 key 不存在，一个空列表会被创建并执行 RPUSH 操作。<br><br>当 key 存在但不是列表类型时，返回一个错误。</td></tr><tr><td>LPUSHX key value</td><td>将值 value 插入到列表 key 的表头，当且仅当 key 存在并且是一个列表。<br><br>和 LPUSH key value [value …] 命令相反，当 key 不存在时， LPUSHX 命令什么也不做。</td></tr><tr><td>RPUSHX key value</td><td>将值 value 插入到列表 key 的表尾，当且仅当 key 存在并且是一个列表。<br><br>和 RPUSH key value [value …] 命令相反，当 key 不存在时， RPUSHX 命令什么也不做。</td></tr></tbody></table><h3 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2" aria-hidden="true">#</a> 应用场景</h3><p>微信文章订阅公众号</p><p>例如：</p><figure><img src="'+k+'" alt="指定用户订阅文章" tabindex="0" loading="lazy"><figcaption>指定用户订阅文章</figcaption></figure><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h2><p>集合，不可重复。</p><h3 id="常用指令-3" tabindex="-1"><a class="header-anchor" href="#常用指令-3" aria-hidden="true">#</a> 常用指令</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>SADD key member [member …]</td><td>将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。<br><br>假如 key 不存在，则创建一个只包含 member 元素作成员的集合。<br><br>当 key 不是集合类型时，返回一个错误。</td></tr><tr><td>SREM key member [member …]</td><td>移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略。<br><br>当 key 不是集合类型，返回一个错误。</td></tr><tr><td>SMEMBERS key</td><td>返回集合 key 中的所有成员。<br><br>不存在的 key 被视为空集合。</td></tr><tr><td>SISMEMBER key member</td><td>判断 member 元素是否集合 key 的成员。<br>如果 <code>member</code> 元素是集合的成员，返回 <code>1</code> 。 如果 <code>member</code> 元素不是集合的成员，或 <code>key</code> 不存在，返回 <code>0</code> 。</td></tr><tr><td>SCARD key</td><td>返回集合 <code>key</code> 的基数(集合中元素的数量)。</td></tr><tr><td>SRANDMEMBER key [count]</td><td>如果命令执行时，只提供了 key 参数，那么返回集合中的一个随机元素。<br><br>从 Redis 2.6 版本开始， SRANDMEMBER 命令接受可选的 count 参数：<br><br>如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。<br><br>如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。<br><br>该操作和 SPOP key 相似，但 SPOP key 将随机元素从集合中移除并返回，而 SRANDMEMBER 则仅仅返回随机元素，而不对集合进行任何改动。</td></tr><tr><td>SPOP key</td><td>移除并返回集合中的一个随机元素。<br><br>如果只想获取一个随机元素，但不想该元素从集合中被移除的话，可以使用 SRANDMEMBER key [count] 命令。<br><br>返回值<br>被移除的随机元素。 当 key 不存在或 key 是空集时，返回 nil 。</td></tr><tr><td>SDIFF key [key …]</td><td>返回一个集合的全部成员，该集合是所有给定集合之间的差集。<br><br>不存在的 key 被视为空集。<br><br>返回值<br>一个包含差集成员的列表。</td></tr></tbody></table><h3 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3" aria-hidden="true">#</a> 应用场景</h3><ol><li><p>随机抽奖小程序</p></li><li><p>微信朋友圈点赞</p></li><li><p>微博好友关注的社交关系（使用SINTER key（获取交集））</p></li><li><p>QQ推荐可能认识的人（使用SDIFF key （获取差集））</p></li></ol><p>例如：</p><p>随机抽奖小程序</p><figure><img src="'+m+'" alt="随机抽奖" tabindex="0" loading="lazy"><figcaption>随机抽奖</figcaption></figure><p>QQ推荐可能认识的人(注意：我这里把好友本身算进去了，其实需要去除)</p><figure><img src="'+v+'" alt="可能认识的人" tabindex="0" loading="lazy"><figcaption>可能认识的人</figcaption></figure><h2 id="zset" tabindex="-1"><a class="header-anchor" href="#zset" aria-hidden="true">#</a> zset</h2><p>有序集合，不可重复。</p><p>在有序集合中加入了一个元素和该元素的分数。</p><p>object encoding key是压缩列表(ziplist)和跳表(skiplist)。</p><ol><li><p>ziplist（压缩列表(O（N））：</p></li><li><p>skiplist（跳表（O（logN）））：</p></li></ol><h3 id="常用指令-4" tabindex="-1"><a class="header-anchor" href="#常用指令-4" aria-hidden="true">#</a> 常用指令</h3><table><thead><tr><th>ZADD key score member [[score member] [score member] …]</th><th>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。<br><br>如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。<br><br>score 值可以是整数值或双精度浮点数。<br><br>如果 key 不存在，则创建一个空的有序集并执行 ZADD 操作。<br><br>当 key 存在但不是有序集类型时，返回一个错误。</th></tr></thead><tbody><tr><td>ZRANGE key start stop [WITHSCORES]</td><td>返回有序集 key 中，指定区间内的成员。<br><br>其中成员的位置按 score 值递增(从小到大)来排序。<br><br>具有相同 score 值的成员按字典序(lexicographical order )来排列。<br><br>如果你需要成员按 score 值递减(从大到小)来排列，请使用 ZREVRANGE key start stop [WITHSCORES] 命令。<br><br>下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。 你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。<br><br>超出范围的下标并不会引起错误。 比如说，当 start 的值比有序集的最大下标还要大，或是 start &gt; stop 时， ZRANGE 命令只是简单地返回一个空列表。 另一方面，假如 stop 参数的值比有序集的最大下标还要大，那么 Redis 将 stop 当作最大下标来处理。<br><br>可以通过使用 WITHSCORES 选项，来让成员和它的 score 值一并返回，返回列表以 value1,score1, ..., valueN,scoreN 的格式表示。 客户端库可能会返回一些更复杂的数据类型，比如数组、元组等。</td></tr><tr><td>ZSCORE key member</td><td>返回有序集 key 中，成员 member 的 score 值。<br><br>如果 member 元素不是有序集 key 的成员，或 key 不存在，返回 nil 。<br><br>返回值<br>member 成员的 score 值，以字符串形式表示。</td></tr><tr><td>ZREM key member [member …]</td><td>移除有序集 key 中的一个或多个成员，不存在的成员将被忽略。<br><br>当 key 存在但不是有序集类型时，返回一个错误。</td></tr><tr><td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</td><td>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。<br><br>具有相同 score 值的成员按字典序(lexicographical order)来排列(该属性是有序集提供的，不需要额外的计算)。<br><br>可选的 LIMIT 参数指定返回结果的数量及区间(就像SQL中的 SELECT LIMIT offset, count )，注意当 offset 很大时，定位 offset 的操作可能需要遍历整个有序集，此过程最坏复杂度为 O(N) 时间。<br><br>可选的 WITHSCORES 参数决定结果集是单单返回有序集的成员，还是将有序集成员及其 score 值一起返回。 该选项自 Redis 2.0 版本起可用。<br><br>区间及无限<br>min 和 max 可以是 -inf 和 +inf ，这样一来，你就可以在不知道有序集的最低和最高 score 值的情况下，使用 ZRANGEBYSCORE 这类命令。<br><br>默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。</td></tr><tr><td>ZINCRBY key increment member</td><td>为有序集 key 的成员 member 的 score 值加上增量 increment 。<br><br>可以通过传递一个负数值 increment ，让 score 减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。<br><br>当 key 不存在，或 member 不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。<br><br>当 key 不是有序集类型时，返回一个错误。<br><br>score 值可以是整数值或双精度浮点数。<br><br>返回值<br>member 成员的新 score 值，以字符串形式表示。</td></tr><tr><td>ZCARD key</td><td>返回有序集 key 的基数。<br><br>返回值<br>当 key 存在且是有序集类型时，返回有序集的基数。 当 key 不存在时，返回 0 。</td></tr><tr><td>ZCOUNT key min max</td><td>返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。<br><br>关于参数 min 和 max 的详细使用方法，请参考 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count] 命令。<br><br>返回值<br>score 值在 min 和 max 之间的成员的数量。</td></tr></tbody></table><br><h3 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4" aria-hidden="true">#</a> 应用场景</h3><ol><li><p>可以根据商品的销售进行排序。</p></li><li><p>点赞排行榜的排序。</p></li><li><p>战力榜排序；</p></li></ol><p>战力榜如下：</p><figure><img src="'+b+'" alt="战力榜" tabindex="0" loading="lazy"><figcaption>战力榜</figcaption></figure><h2 id="reids分布式锁" tabindex="-1"><a class="header-anchor" href="#reids分布式锁" aria-hidden="true">#</a> reids分布式锁</h2><h4 id="什么是分布式锁" tabindex="-1"><a class="header-anchor" href="#什么是分布式锁" aria-hidden="true">#</a> 什么是分布式锁？</h4><p>分布式微服务架构，拆分后各个微服务之间为了避免冲突和数据故障而加入的一种锁。</p><h4 id="有哪些可以实现分布式锁" tabindex="-1"><a class="header-anchor" href="#有哪些可以实现分布式锁" aria-hidden="true">#</a> 有哪些可以实现分布式锁？</h4><ol><li><p>mysql</p></li><li><p>zookeeper</p></li><li><p>reids（setnx）</p></li></ol><p>一般常用的是redis分布式锁。</p><h4 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题？</h4><h5 id="redis做分布式锁的时候-需要注意哪些问题" tabindex="-1"><a class="header-anchor" href="#redis做分布式锁的时候-需要注意哪些问题" aria-hidden="true">#</a> redis做分布式锁的时候，需要注意哪些问题？</h5><ol><li><p>redis.setnx的时候需要注意原子性；</p></li><li><p>redis.del的时候需要注意原子性，确保删除的是该线程持有的锁，一般采用lua脚本使用(官网推荐)；</p></li><li><p>setnx时设置了过期时间，存在过期时间结束却线程未执行结束，这个时候其他线程可以获得锁，这个可以使用获取锁的线程后台启动一个守护线程，每次快过期时间快到时，重置过期时间；</p></li></ol><h5 id="如果redis是单点部署-会带来什么问题" tabindex="-1"><a class="header-anchor" href="#如果redis是单点部署-会带来什么问题" aria-hidden="true">#</a> 如果redis是单点部署，会带来什么问题？</h5><p>那你准备怎么解决单点问题？</p>',58),x={href:"https://blog.csdn.net/weixin_38587368/article/details/108083509",target:"_blank",rel:"noopener noreferrer"},S=n("h5",{id:"集群模式下-比如主从模式-有没有什么问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#集群模式下-比如主从模式-有没有什么问题","aria-hidden":"true"},"#"),s(" 集群模式下，比如主从模式，有没有什么问题？")],-1),L={href:"https://www.zhihu.com/question/507441007/answer/2471128698",target:"_blank",rel:"noopener noreferrer"},E=n("h5",{id:"那你简单的介绍一下redlock-你简历上写了redisson-你描述一下",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#那你简单的介绍一下redlock-你简历上写了redisson-你描述一下","aria-hidden":"true"},"#"),s(" 那你简单的介绍一下Redlock? 你简历上写了redisson，你描述一下？")],-1),R={href:"https://www.bbsmax.com/A/D854NgVVzE/",target:"_blank",rel:"noopener noreferrer"},N=t(`<h5 id="redis分布式锁如何续期-看门狗知道吗" tabindex="-1"><a class="header-anchor" href="#redis分布式锁如何续期-看门狗知道吗" aria-hidden="true">#</a> redis分布式锁如何续期？看门狗知道吗？</h5><p>通过守护进程看门狗，每隔10s（this.internalLockLeaseTime / 3L）检查是否完成，未结束进行续期，每次续命值默认为30s（this.internalLockLeaseTime）。</p><p>看门狗是个守护线程，守护线程的特性是必须得有线程守护，服务宕机，守护线程关闭，不会再次续期，key直到过期失效。</p><h5 id="不可以用lua脚本-还有其他办法吗" tabindex="-1"><a class="header-anchor" href="#不可以用lua脚本-还有其他办法吗" aria-hidden="true">#</a> 不可以用lua脚本，还有其他办法吗？</h5><p>使用事务</p><h3 id="缓存过期淘汰策略" tabindex="-1"><a class="header-anchor" href="#缓存过期淘汰策略" aria-hidden="true">#</a> 缓存过期淘汰策略</h3><hr><p>redis内存(maxmemory)设置为0或者未设置时，，在64位操作系统下为不限制内存大小，在32位操作系统下最多使用3GB内存。</p><p>redis内存maxmemory默认配置为0。</p><p>redis内存设置一般推荐为最大物理内存的四分之三。</p><p>config get maxmemory 查看运行的最大限制内存大小。</p><p>config set maxmemory 1 设置最大限制内存为1字节。</p><p>info memory 查看内存信息。</p><h4 id="如何修改内存大小" tabindex="-1"><a class="header-anchor" href="#如何修改内存大小" aria-hidden="true">#</a> 如何修改内存大小？</h4><ol><li>修改配置文件的maxmemory属性；</li><li>通过指令执行修改（config set maxmemory value）；</li></ol><h4 id="redis内存满了怎么办" tabindex="-1"><a class="header-anchor" href="#redis内存满了怎么办" aria-hidden="true">#</a> redis内存满了怎么办？</h4><p>set k1 v1</p><p>抛出如下错误：</p><p><code>OOM command not allowed when used memory &gt; &#39;maxmemory&#39;.</code></p><h4 id="redis缓存淘汰策略" tabindex="-1"><a class="header-anchor" href="#redis缓存淘汰策略" aria-hidden="true">#</a> redis缓存淘汰策略</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token comment">#  最大限制内存</span>

 maxmemory

<span class="token comment">#  内存淘汰策略</span>

 MAXMEMORY POLICY: how Redis will <span class="token keyword">select</span> what to remove when maxmemory

 is reached. You can <span class="token keyword">select</span> one from the following behaviors:

<span class="token comment">#</span>

<span class="token comment">#  对所有设置了过期时间的key使用LRU算法进行删除</span>

 volatile-lru -<span class="token operator">&gt;</span> Evict using approximated LRU, only keys with an expire set.

<span class="token comment">#  对所有key使用LRU算法进行删除</span>

 allkeys-lru -<span class="token operator">&gt;</span> Evict any key using approximated LRU.

<span class="token comment">#  对所有设置了过期时间的key使用LFU算法进行删除</span>

 volatile-lfu -<span class="token operator">&gt;</span> Evict using approximated LFU, only keys with an expire set.

<span class="token comment">#  对所有key使用LFU算法进行删除</span>

 allkeys-lfu -<span class="token operator">&gt;</span> Evict any key using approximated LFU.

<span class="token comment">#  对所有设置了过期时间的key使用随机删除</span>

 volatile-random -<span class="token operator">&gt;</span> Remove a random key having an expire set.

<span class="token comment">#  对所有的key使用随机删除</span>

 allkeys-random -<span class="token operator">&gt;</span> Remove a random key, any key.

<span class="token comment">#  删除马上要过期的key</span>

 volatile-ttl -<span class="token operator">&gt;</span> Remove the key with the nearest expire <span class="token function">time</span> <span class="token punctuation">(</span>minor TTL<span class="token punctuation">)</span>

<span class="token comment">#  不会驱逐任何key</span>

 noeviction -<span class="token operator">&gt;</span> Don&#39;t evict anything, just <span class="token builtin class-name">return</span> an error on <span class="token function">write</span> operations.

<span class="token comment">#  意味着最近最少使用</span>

 LRU means Least Recently Used

<span class="token comment">#  意味着最常用</span>

 LFU means Least Frequently Used



<span class="token number">2</span>个维度：

  <span class="token number">1</span>. 过期键中筛选； 

  <span class="token number">2</span>. 所有键中筛选； 

<span class="token number">4</span>个方面：

  <span class="token number">1</span>. lru； 

  <span class="token number">2</span>. lfu； 

  <span class="token number">3</span>. 随机； 

  <span class="token number">4</span>. ttl； 

实际最常用： allkeys-lru

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当没有配置 <strong>MAXMEMORY POLICY</strong> ，默认为 <strong>maxmemory_policy:noeviction</strong> 。</p><h5 id="如果一个键是过期的-那它到了过期时间之后就马上从内存之后删除吗" tabindex="-1"><a class="header-anchor" href="#如果一个键是过期的-那它到了过期时间之后就马上从内存之后删除吗" aria-hidden="true">#</a> 如果一个键是过期的，那它到了过期时间之后就马上从内存之后删除吗？</h5><h6 id="三大过期删除策略" tabindex="-1"><a class="header-anchor" href="#三大过期删除策略" aria-hidden="true">#</a> 三大过期删除策略</h6><ol><li><p>定时删除：对CPU不友好，用处理器性能换取存储空间。(时间换空间) 。</p></li><li><p>惰性删除：数据达到过期时间，下次调用再进行删除，会造成大量无效数据，除非FLUSHDB。（空间换时间） 。</p></li><li><p>定期删除：每隔一段时间执行一次删除过期键操作，并利用限制删除操作执行的时长和频率来减少对CPU时间的影响。</p></li></ol><figure><img src="`+h+`" alt="定期删除的特点" tabindex="0" loading="lazy"><figcaption>定期删除的特点</figcaption></figure><p>即使这样还是会有漏网之鱼，所以出现了淘汰策略。</p><h3 id="lru算法" tabindex="-1"><a class="header-anchor" href="#lru算法" aria-hidden="true">#</a> LRU算法</h3><ol><li><p>参考 <code>LinkHashMap</code> 进行实现；</p></li><li><p>使用 <code>Map</code> 加 <code>Node </code>实现；</p></li></ol><p>第二种实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>

<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>blacktea<span class="token punctuation">.</span>redisson</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringJoiner</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: black tea
 * <span class="token keyword">@date</span>: 2022/7/3 19:22
 */</span>

<span class="token annotation punctuation">@Slf4j</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLruDemo</span> <span class="token punctuation">{</span>


    <span class="token doc-comment comment">/**
     * Node节点，作为数据的载体
     *
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span>
     */</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
        <span class="token class-name">V</span> value<span class="token punctuation">;</span>
        <span class="token class-name">K</span> key<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 双向链表，里面的数据就是我们的Node
     *
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>K<span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span>
     */</span>

    <span class="token keyword">class</span> <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">DoubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>
            tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHead</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>
            head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>
            head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 尾结点是虚拟节点</span>
            <span class="token keyword">return</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">int</span> cacheSize<span class="token punctuation">;</span>

    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>

    <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> doubleLinkedList<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">MyLruDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 缓存长度</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheSize <span class="token operator">=</span> cacheSize<span class="token punctuation">;</span>
        <span class="token comment">// 查找 hash</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 双向链表</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>doubleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将Node放到队列头部</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 初始化Node</span>
            node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cacheSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 缓存长度达到</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lastNode <span class="token operator">=</span> doubleLinkedList<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                doubleLinkedList<span class="token punctuation">.</span><span class="token function">removeNode</span><span class="token punctuation">(</span>lastNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加到队列头</span>
        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doubleLinkedList<span class="token punctuation">.</span>head<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token class-name">StringJoiner</span> nodeJoiner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nodeJoiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;当前lru的结果是{}&quot;</span><span class="token punctuation">,</span> nodeJoiner<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">MyLruDemo</span> myLruDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLruDemo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">logNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">logNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">logNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">logNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">logNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        myLruDemo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myLruDemo<span class="token punctuation">.</span><span class="token function">logNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分布式锁luan脚本" tabindex="-1"><a class="header-anchor" href="#分布式锁luan脚本" aria-hidden="true">#</a> 分布式锁luan脚本</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;exists&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">then</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;hincrby&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;pexpire&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;hexists&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">then</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;hincrby&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;pexpire&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">nil</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;pttl&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function _(T,D){const a=o("ExternalLinkIcon");return c(),i("div",null,[g,n("p",null,[n("a",f,[s(" Redis数据结构 - 简书 (jianshu.com) "),e(a)])]),w,n("p",null,[n("a",x,[s(" (23条消息) Redis 单机部署常见问题以及生产环境下的优化和安全设置_dlin2020的博客-CSDN博客 "),e(a)])]),S,n("p",null,[n("a",L,[s(" Redis 主从集群常见的问题有哪些？ - 知乎 (zhihu.com) "),e(a)])]),E,n("p",null,[n("a",R,[s(" Redisson 分布式锁源码 09：RedLock 红锁的故事 (bbsmax.com) "),e(a)])]),N])}const H=p(y,[["render",_],["__file","redis.html.vue"]]);export{H as default};
