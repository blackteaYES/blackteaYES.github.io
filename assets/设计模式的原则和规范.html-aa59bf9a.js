const e=JSON.parse('{"key":"v-16238690","path":"/backEnd/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83.html","title":"设计模式简述","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-03-22T00:00:00.000Z","category":["设计模式"],"tag":["开发","设计模式"],"description":"设计模式简述   设计模式本身没有法则，但是设计模式所遵循的原则和规范可以被称为法则。   以下是常见的设计模式法则： 单一职责原则（Single Responsibility Principle，SRP）：一个类应该只有一个引起它变化的原因。 开闭原则（Open-Closed Principle，OCP）：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。 里氏替换原则（Liskov Substitution Principle，LSP）：任何基类可以出现的地方，子类一定可以出现。 依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。 合成复用原则（Composite Reuse Principle， CRP）：尽量使用对象组合，而不是继承来达到复用的目的。 接口隔离原则（Interface Segregation Principle，ISP）：客户端不应该依赖它不需要的接口。 迪米特法则（Law of Demeter，LoD）：一个对象应该对其他对象保持最少的了解。","head":[["meta",{"property":"og:url","content":"https://blakteayes.github.io/backEnd/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8E%9F%E5%88%99%E5%92%8C%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:site_name","content":"红茶的博客"}],["meta",{"property":"og:title","content":"设计模式简述"}],["meta",{"property":"og:description","content":"设计模式简述   设计模式本身没有法则，但是设计模式所遵循的原则和规范可以被称为法则。   以下是常见的设计模式法则： 单一职责原则（Single Responsibility Principle，SRP）：一个类应该只有一个引起它变化的原因。 开闭原则（Open-Closed Principle，OCP）：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。 里氏替换原则（Liskov Substitution Principle，LSP）：任何基类可以出现的地方，子类一定可以出现。 依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。 合成复用原则（Composite Reuse Principle， CRP）：尽量使用对象组合，而不是继承来达到复用的目的。 接口隔离原则（Interface Segregation Principle，ISP）：客户端不应该依赖它不需要的接口。 迪米特法则（Law of Demeter，LoD）：一个对象应该对其他对象保持最少的了解。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"开发"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-03-22T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式简述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"以下是常用的设计模式","slug":"以下是常用的设计模式","link":"#以下是常用的设计模式","children":[{"level":3,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[]},{"level":3,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":3,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.69,"words":1107},"filePathRelative":"backEnd/设计模式/设计模式的原则和规范.md","localizedDate":"2023年3月22日","excerpt":"<h1> 设计模式简述</h1>\\n<p>  设计模式本身没有法则，但是设计模式所遵循的原则和规范可以被称为法则。</p>\\n<p>  以下是常见的设计模式法则：</p>\\n<ol style=\\"padding-left: 5em;\\">\\n    <li> 单一职责原则（Single Responsibility Principle，SRP）：一个类应该只有一个引起它变化的原因。</li>\\n    <li> 开闭原则（Open-Closed Principle，OCP）：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。</li>\\n    <li>里氏替换原则（Liskov Substitution Principle，LSP）：任何基类可以出现的地方，子类一定可以出现。</li>\\n    <li>依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</li>\\n    <li>合成复用原则（Composite Reuse Principle， CRP）：尽量使用对象组合，而不是继承来达到复用的目的。</li>\\n    <li>接口隔离原则（Interface Segregation Principle，ISP）：客户端不应该依赖它不需要的接口。</li>\\n    <li>迪米特法则（Law of Demeter，LoD）：一个对象应该对其他对象保持最少的了解。</li>\\n</ol>","autoDesc":true}');export{e as data};
